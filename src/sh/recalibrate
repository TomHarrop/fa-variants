#!/usr/bin/env bash

gatk="bin/GenomeAnalysisTK-3.6/GenomeAnalysisTK.jar"

printf "[ %s: Base quality recalibration ]\n" "$(date)"

source "src/sh/bash_header"
source "src/sh/io_parser"

java_ram=$((max_cpus*3))"g"
mrir=$((ram_limit/6000)) # max records in RAM

# make outdir
outdir="$(dirname "${output_bam}")"
if [[ ! -d "${outdir}" ]]; then
    mkdir -p "${outdir}"
fi
bn="$(basename "${output_bam}" ".recal.bam")"
log_file="${outdir}/${bn}.PrintReads.log"

# build command
cmd=( java "-Xmx${java_ram}" "-XX:ParallelGCThreads=${max_cpus}" 
      -jar "${gatk}" -T PrintReads
      --bam_compression 9 --read_buffer_size "${mrir}"
      --num_cpu_threads_per_data_thread "${max_cpus}"
      -R "${input_fa}" -I "${input_bam}" -BQSR "${input_table}"
      -o "${output_bam}" )

shopt -s extglob
printf "Final command line: "
printf "%s " "${cmd[@]//+([[:blank:]])/ }"
printf "\n"
shopt -u extglob

# run PrintReads
srun --ntasks=1 --cpus-per-task="${max_cpus}" --exclusive \
    --output="${log_file}" "${cmd[@]}" &

printf "[ %s: Waiting for PrintReads to finish ]\n" "$(date)"
FAIL=0
fail_wait

# log metadata
metadata_file="${outdir}/${bn}.PrintReads.METADATA.csv"

printf "[ %s: Logging metadata ]\n" "$(date)"
printf "metadata_file: %s\n" "${metadata_file}"
cat <<- _EOF_ > "${metadata_file}"
    Script,${0}
    branch,$(git rev-parse --abbrev-ref HEAD)
    hash,$(git rev-parse HEAD)
    date,$(date +%F)
    gatk version,$(java -jar ${gatk} --version 2>&1)
    output,${outdir}
_EOF_

printf "[ %s: Done ]\n" "$(date)"

exit 0
