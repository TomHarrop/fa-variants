#!/usr/bin/env bash

set -e

# bash traceback code from https://docwhat.org/tracebacks-in-bash/
_showed_traceback=f

_exit_trap () {
  local _ec="$?"
  if [[ $_ec != 0 && "${_showed_traceback}" != t ]]; then
    traceback 1
  fi
}

_err_trap() {
  local _ec="$?"
  local _cmd="${BASH_COMMAND:-unknown}"
  traceback 1
  _showed_traceback=t
  echo "The command ${_cmd} exited with exit code ${_ec}." 1>&2
}

traceback() {
  # Hide the traceback() call.
  local -i start=$(( ${1:-0} + 1 ))
  local -i end=${#BASH_SOURCE[@]}
  local -i i=0
  local -i j=0

  echo "Traceback (last called is first):" 1>&2
  for ((i=start; i < end; i++)); do
    j=$(( i - 1 ))
    local function="${FUNCNAME[$i]}"
    local file="${BASH_SOURCE[$i]}"
    local line="${BASH_LINENO[$j]}"
    echo "     ${function}() in ${file}:${line}" 1>&2
  done
}

# traps
trap _err_trap SIGHUP SIGINT SIGTERM
trap _exit_trap EXIT
trap _err_trap ERR

# how many CPUs?
if [[ $SLURM_JOB_CPUS_PER_NODE ]]; then
  MAX_CPUS="$SLURM_JOB_CPUS_PER_NODE"
  echo -e "[ $(date): Running with $MAX_CPUS CPUs ]"
else
  MAX_CPUS=1
fi
let "RAM_LIMIT = $MAX_CPUS * 3000000000"
echo -e "[ $(date): Allocating $((RAM_LIMIT/1000000000)) GB RAM ]"

# handle waiting
FAIL=0
fail_wait() {
for job in $(jobs -p); do
  wait "$job" || let "FAIL+=1"
done
if [[ ! "$FAIL" == 0 ]]; then
  echo -e "[ $(date): Detected fail in background job ]"
  exit 1
fi
}

set -u
